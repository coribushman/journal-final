{"remainingRequest":"/Users/coribushman/Desktop/CS 260/cp4-journal/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/coribushman/Desktop/CS 260/cp4-journal/front-end/src/views/CreateTag.vue?vue&type=style&index=0&id=75fa4d34&scoped=true&lang=css&","dependencies":[{"path":"/Users/coribushman/Desktop/CS 260/cp4-journal/front-end/src/views/CreateTag.vue","mtime":1618344778477},{"path":"/Users/coribushman/Desktop/CS 260/cp4-journal/front-end/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/coribushman/Desktop/CS 260/cp4-journal/front-end/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/coribushman/Desktop/CS 260/cp4-journal/front-end/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/coribushman/Desktop/CS 260/cp4-journal/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/coribushman/Desktop/CS 260/cp4-journal/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoucGFnZSB7CiAgbWFyZ2luOiAzMHB4OwogIG1hcmdpbi1ib3R0b206IDUwcHg7Cn0KCi50YWcgewogIGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrOwogIHdpZHRoOiBmaXQtY29udGVudDsKICBwYWRkaW5nOiAycHg7Cgp9Cgo="},{"version":3,"sources":["CreateTag.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0HA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","file":"CreateTag.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"page\">\n    <h1>Create a Journal Tag</h1>\n    <div class=\"add\">\n        <div class=\"form\">\n          <input v-model=\"newTag.title\" placeholder=\"Title\">\n          <p></p>\n          <input v-model=\"newTag.color\" placeholder=\"Color word or #hex\">\n          <p></p>\n          <button @click=\"upload\">Upload</button>\n        </div>\n        <div class=\"upload\" v-if=\"addedTag\">\n          <p>Your tag has been added! Title: {{addedTag.title}}</p>\n        </div>\n      </div>\n\n      <hr>\n      <h1>Current Journal Tags</h1>\n\n      <div class=\"edit\" v-if=\"Object.keys(editedTag).length !== 0\">\n        <input v-model=\"editedTag.title\" placeholder=\"Title\">\n        <p></p>\n        <input v-model=\"editedTag.color\" placeholder=\"Color\">\n        <button @click=\"updateTag()\">Update</button>\n      </div>\n\n      <div class=\"not-edit\" v-else-if=\"Object.keys(editedTag).length === 0\">\n        <div class=\"tags\" v-for=\"tag in tags\" :key=\"tag.id\">\n          <p class=\"tag\" v-bind:style=\"{'color':tag.color}\">{{tag.title}}</p>\n          <div class=\"buttons\">\n            <button @click=\"deleteTag(tag)\">Delete</button>\n            <button @click=\"select(tag)\">Edit</button>\n          </div>\n        </div>\n      </div>\n\n  </div>\n</template>\n\n<script>\n  import axios from 'axios';\n  export default {\n  name: 'CreateTag',\n  data() {\n    return {\n      tags: [],\n      addedTag: null,\n      editedTag: {},\n      newTag: {\n        id: 0,\n        title: \"\",\n        color: \"\",\n        entries: [],\n      },\n    }\n  },\n  created() {\n    this.getTags();\n  },\n  methods: {\n    async deleteTag(tagToDelete) {\n      try {\n        await axios.delete(\"/api/tags/\" + tagToDelete.id);\n        this.getTags();\n        return true;\n      } catch (error) {\n        //console.log(error);\n      }\n    },\n    select(tag) {\n      this.editedTag.id = tag.id;\n      this.editedTag.title = tag.title;\n      this.editedTag.color = tag.color;\n      this.editedTag.entries = tag.entries;\n      this.getTags();\n    },\n    async updateTag() {\n      try {\n        await axios.put(\"/api/tags/\" + this.editedTag.id, {\n          id: this.editedTag.id,\n          title: this.editedTag.title,\n          color: this.editedTag.color,\n          enties: this.editedTag.entries,\n        });\n        this.editedTag = {};\n        this.getTags();\n        return true;\n      } catch (error) {\n        //console.log(error);\n      }\n\n    },\n    async getTags() {\n      try {\n        let response = await axios.get(\"/api/tags\");\n        this.tags = response.data;\n        return true;\n      } catch (error) {\n        //console.log(error);\n      }\n    },\n    async upload() {\n      try {\n        this.newTag.id = this.tags.length + 1000;\n        let response = await axios.post('/api/tags', {\n            id: this.newTag.id,\n            title: this.newTag.title,\n            color: this.newTag.color,\n            entries: this.newTag.entries,\n        });\n        this.addedTag = response.data;\n        this.getTags();\n      } catch (error) {\n        //console.log(error);\n      }\n\n    },\n  }\n}\n</script>\n\n<style scoped>\n.page {\n  margin: 30px;\n  margin-bottom: 50px;\n}\n\n.tag {\n  border: 2px solid black;\n  width: fit-content;\n  padding: 2px;\n\n}\n\n</style>\n"]}]}